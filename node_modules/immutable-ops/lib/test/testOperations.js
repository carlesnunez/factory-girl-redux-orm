'use strict';

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

var _deepFreeze = require('deep-freeze');

var _deepFreeze2 = _interopRequireDefault(_deepFreeze);

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_sinonChai2.default);
var expect = _chai2.default.expect;


describe('batched', function () {
    it('works', function () {
        var res = _index.ops.batched(function (batchOps) {
            var obj = {};
            var result = batchOps.set('a', 1, obj);
            expect(result).to.deep.equal({ a: 1 });
            expect(result).not.to.equal(obj);

            var result2 = batchOps.omit('a', result);
            expect(result2).to.equal(result);
            expect(result2).to.deep.equal({});
            return result2;
        });

        expect(res).to.deep.equal({});
    });
});

describe('operations', function () {
    describe('object', function () {
        describe('batched mutations', function () {
            var token = (0, _index.getBatchToken)();
            it('deepMerges', function () {
                var baseObj = (0, _deepFreeze2.default)({
                    change: 'Tommi',
                    dontChange: 25,
                    deeper: {
                        dontChange: 'John',
                        change: 30
                    }
                });
                var mergeObj = (0, _deepFreeze2.default)({
                    change: 'None',
                    add: 'US',
                    deeper: {
                        add: 'US',
                        change: 35
                    }
                });
                var merger = _index.ops.batch.deepMerge(token, mergeObj);
                var result = merger(baseObj);
                expect((0, _index.canMutate)(result, token)).to.be.true;
                expect((0, _index.canMutate)(result.deeper, token)).to.be.true;

                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;
                expect((0, _index.canMutate)(result.deeper, (0, _index.getBatchToken)())).to.be.false;

                expect(result).to.not.equal(baseObj);

                expect(result).to.contain.all.keys(['change', 'dontChange', 'add', 'deeper']);
                expect(result.change).to.not.equal(baseObj.change);
                expect(result.dontChange).to.equal(baseObj.dontChange);

                expect(result.deeper).to.not.equal(baseObj.deeper);
                expect(result.deeper).to.contain.all.keys(['dontChange', 'change', 'add']);
                expect(result.deeper.dontChange).to.equal(baseObj.deeper.dontChange);
                expect(result.deeper.change).to.not.equal(baseObj.deeper.change);
            });

            it('omits a single key', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var omitter = _index.ops.batch.omit(token, 'age');

                var result = omitter(obj);
                expect((0, _index.canMutate)(result, token)).to.be.true;

                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;
                expect(result).to.not.contain.keys(['age']);

                // Further modification should mutate the existing object.
                expect(_index.ops.batch.omit(token, 'name', result)).to.equal(result);
            });

            it('omits an array of keys', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var omitter = _index.ops.batch.omit(token, ['age']);
                var result = omitter(obj);

                expect((0, _index.canMutate)(result, token)).to.be.true;

                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;
                expect(result).to.not.contain.keys(['age']);

                // Further modification should mutate the existing object.
                expect(_index.ops.batch.omit(token, ['name'], result)).to.equal(result);
            });

            it('sets a value', function () {
                var obj = (0, _deepFreeze2.default)({
                    one: 1,
                    two: 500,
                    three: 3
                });

                var result = _index.ops.batch.set(token, 'two', 5, obj);

                expect((0, _index.canMutate)(result, token)).to.be.true;
                var result2 = _index.ops.batch.set(token, 'two', 2, result);
                expect(result2).to.deep.equal({
                    one: 1,
                    two: 2,
                    three: 3
                });

                expect(result).to.equal(result2);
            });

            it('sets a value in path', function () {
                var obj = (0, _deepFreeze2.default)({
                    first: {
                        second: {
                            value: 'value',
                            maintain: true
                        },
                        maintain: true
                    },
                    maintain: true
                });

                var setter = _index.ops.batch.setIn(token, 'first.second.value', 'anotherValue');

                var result = setter(obj);
                expect((0, _index.canMutate)(result, token)).to.be.true;

                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;
                expect(result).not.to.equal(obj);
                expect(result.first.second.value).to.equal('anotherValue');
                expect(result.maintain).to.be.true;
                expect(result.first.maintain).to.be.true;
                expect(result.first.second.maintain).to.be.true;

                var result2 = _index.ops.batch.setIn(token, 'first.second.value', 'secondAnotherValue', result);
                expect(result).to.equal(result2);
                expect(result2.first.second.value).to.equal('secondAnotherValue');
            });
        });

        describe('immutable ops', function () {
            it('deepMerges', function () {
                var baseObj = (0, _deepFreeze2.default)({
                    change: 'Tommi',
                    dontChange: 25,
                    deeper: {
                        dontChange: 'John',
                        change: 30
                    }
                });
                var mergeObj = (0, _deepFreeze2.default)({
                    change: 'None',
                    add: 'US',
                    deeper: {
                        add: 'US',
                        change: 35
                    }
                });

                var merger = _index.ops.deepMerge(mergeObj);
                var result = merger(baseObj);

                expect((0, _index.canMutate)(result)).to.be.false;
                expect((0, _index.canMutate)(result.deeper)).to.be.false;

                expect(result).to.not.equal(baseObj);

                expect(result).to.contain.all.keys(['change', 'dontChange', 'add', 'deeper']);
                expect(result.change).to.not.equal(baseObj.change);
                expect(result.dontChange).to.equal(baseObj.dontChange);

                expect(result.deeper).to.not.equal(baseObj.deeper);
                expect(result.deeper).to.contain.all.keys(['dontChange', 'change', 'add']);
                expect(result.deeper.dontChange).to.equal(baseObj.deeper.dontChange);
                expect(result.deeper.change).to.not.equal(baseObj.deeper.change);
            });

            it('deepMerges and returns initial object when no values changed', function () {
                var baseObj = (0, _deepFreeze2.default)({
                    deep: {
                        dontChange: 'John'
                    }
                });
                var mergeObj = (0, _deepFreeze2.default)({
                    deep: {
                        dontChange: 'John'
                    }
                });

                var result = _index.ops.deepMerge(mergeObj, baseObj);
                expect(result).to.equal(baseObj);
            });

            it('omits a single key', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var omitter = _index.ops.omit('age');
                var result = omitter(obj);

                expect((0, _index.canMutate)(result)).to.be.false;
                expect(result).to.not.contain.keys(['age']);
            });

            it('omits a single key, returns same object if no value changes', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var result = _index.ops.omit('location', obj);
                expect(result).to.equal(obj);
            });

            it('omits an array of keys', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var omitter = _index.ops.omit(['age']);
                var result = omitter(obj);

                expect((0, _index.canMutate)(result)).to.be.false;
                expect(result).to.not.contain.keys(['age']);
            });

            it('sets a value', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var result = _index.ops.set('age', 26, obj);
                expect(result).to.deep.equal({
                    name: 'Tommi',
                    age: 26
                });
            });

            it('sets a value and returns the initial value of no changes', function () {
                var obj = (0, _deepFreeze2.default)({
                    name: 'Tommi',
                    age: 25
                });

                var result = _index.ops.set('age', 25, obj);
                expect(result).to.equal(obj);
            });

            it('sets a value in path', function () {
                var obj = (0, _deepFreeze2.default)({
                    first: {
                        second: {
                            value: 'value',
                            maintain: true
                        },
                        maintain: true
                    },
                    maintain: true
                });

                var setter = _index.ops.setIn('first.second.value', 'anotherValue');

                var result = setter(obj);

                expect((0, _index.canMutate)(result)).to.be.false;
                expect(result).not.to.equal(obj);
                expect(result.first.second.value).to.equal('anotherValue');
                expect(result.maintain).to.be.true;
                expect(result.first.maintain).to.be.true;
                expect(result.first.second.maintain).to.be.true;
            });

            it('sets a value in path but returns same object if no value changes', function () {
                var obj = (0, _deepFreeze2.default)({
                    first: {
                        second: {
                            value: 'value',
                            maintain: true
                        },
                        maintain: true
                    },
                    maintain: true
                });

                var result = _index.ops.setIn('first.second.value', 'value', obj);
                expect(result).to.equal(obj);
            });
        });
    });

    describe('array', function () {
        describe('batched mutations', function () {
            var token = (0, _index.getBatchToken)();

            it('push', function () {
                var push = _index.ops.batch.push;
                var arr = (0, _deepFreeze2.default)([5, 4]);
                var pusher = push(token, (0, _deepFreeze2.default)([1, 2, 3]));
                var result = pusher(arr);

                expect(result).to.not.equal(arr);

                expect(result).to.deep.equal([5, 4, 1, 2, 3]);

                var result2 = push(token, [4, 5], result);
                expect(result).to.equal(result2);
                expect(result2).to.deep.equal([5, 4, 1, 2, 3, 4, 5]);
            });

            it('insert', function () {
                var insert = _index.ops.batch.insert;
                var arr = (0, _deepFreeze2.default)([1, 2, 5]);
                var inserter = insert(token, 2, (0, _deepFreeze2.default)([3, 4]));
                var result = inserter(arr);

                expect(result).to.deep.equal([1, 2, 3, 4, 5]);

                var result2 = _index.ops.batch.insert(token, 2, [1000], result);
                expect(result).to.equal(result2);
                expect(result2).to.deep.equal([1, 2, 1000, 3, 4, 5]);
            });

            it('filter', function () {
                var arr = (0, _deepFreeze2.default)([0, 1, 2, 3]);
                var result = _index.ops.batch.filter(token, function (item) {
                    return item % 2 === 0;
                }, arr);
                expect((0, _index.canMutate)(result, token)).to.be.true;

                expect(result).to.deep.equal([0, 2]);
                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;

                var result2 = _index.ops.batch.filter(token, function (item) {
                    return item === 2;
                }, result);
                expect(result2).to.equal(result);
                expect(result2).to.deep.equal([2]);
            });

            it('set', function () {
                var arr = (0, _deepFreeze2.default)([1, 2, 987, 4]);

                var setter = _index.ops.batch.set(token, 2, 3);
                var result = setter(arr);
                expect((0, _index.canMutate)(result, token)).to.be.true;

                expect((0, _index.canMutate)(result, (0, _index.getBatchToken)())).to.be.false;
                expect(result).to.deep.equal([1, 2, 3, 4]);

                var result2 = _index.ops.batch.set(token, 2, 1000, result);
                expect(result).to.equal(result2);
                expect(result2).to.deep.equal([1, 2, 1000, 4]);
            });

            it('splice with deletions', function () {
                var splice = _index.ops.batch.splice;
                var arr = (0, _deepFreeze2.default)([1, 2, 3, 3, 3, 4]);
                var splicer = splice(token, 2, 2, []);

                var result = splicer(arr);

                expect(result).to.deep.equal([1, 2, 3, 4]);

                var result2 = _index.ops.batch.splice(token, 2, 1, [], result);
                expect(result2).to.equal(result);
                expect(result2).to.deep.equal([1, 2, 4]);
            });

            it('splice with additions', function () {
                var splice = _index.ops.batch.splice;
                var arr = (0, _deepFreeze2.default)([1, 5]);
                var splicer = splice(token, 1, 0, [2, 3, 4]);

                var result = splicer(arr);

                expect(result).to.deep.equal([1, 2, 3, 4, 5]);

                var result2 = _index.ops.batch.splice(token, 0, 1, [1000], result);
                expect(result).to.equal(result2);
                expect(result2).to.deep.equal([1000, 2, 3, 4, 5]);
            });
        });

        describe('immutable ops', function () {
            it('push', function () {
                var push = _index.ops.push;
                var arr = (0, _deepFreeze2.default)([5, 4]);
                var pusher = push((0, _deepFreeze2.default)([1, 2, 3]));
                var result = pusher(arr);

                expect(result).to.not.equal(arr);

                expect(result).to.deep.equal([5, 4, 1, 2, 3]);
            });

            it('insert', function () {
                var insert = _index.ops.insert;
                var arr = (0, _deepFreeze2.default)([1, 2, 5]);
                var inserter = insert(2, (0, _deepFreeze2.default)([3, 4]));
                var result = inserter(arr);

                expect(result).to.deep.equal([1, 2, 3, 4, 5]);
            });

            it('filter', function () {
                var arr = (0, _deepFreeze2.default)([0, 1, 2, 3]);

                var result = _index.ops.filter(function (item) {
                    return item % 2 === 0;
                }, arr);

                expect(result).to.deep.equal([0, 2]);
                expect((0, _index.canMutate)(result)).to.be.false;
            });

            it('filter with no effect should return initial array', function () {
                var arr = (0, _deepFreeze2.default)([0, 1, 2, 3]);
                var result = _index.ops.filter(function (item) {
                    return item < 4;
                }, arr);
                expect(result).to.equal(arr);
            });

            it('set', function () {
                var arr = (0, _deepFreeze2.default)([1, 2, 987, 4]);

                var result = _index.ops.set(2, 3, arr);

                expect((0, _index.canMutate)(result)).to.be.false;
                expect(result).to.deep.equal([1, 2, 3, 4]);
            });

            it('set with no effect should return initial array', function () {
                var arr = (0, _deepFreeze2.default)([1, 2, 3, 4]);

                var result = _index.ops.set(2, 3, arr);
                expect(result).to.equal(arr);
            });

            it('splice with deletions', function () {
                var splice = _index.ops.splice;
                var arr = (0, _deepFreeze2.default)([1, 2, 3, 3, 3, 4]);
                var splicer = splice(2, 2, []);

                var result = splicer(arr);
                expect(result).to.deep.equal([1, 2, 3, 4]);
            });

            it('splice with additions', function () {
                var splice = _index.ops.splice;
                var arr = (0, _deepFreeze2.default)([1, 5]);
                var splicer = splice(1, 0, [2, 3, 4]);

                var result = splicer(arr);

                expect(result).to.deep.equal([1, 2, 3, 4, 5]);
            });
        });
    });
});